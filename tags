!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ANSI_COLOR_H	include/ansi_color.h	14;"	d
ARROW_LEFT	include/defines.h	22;"	d
ARROW_RIGHT	include/defines.h	23;"	d
AUX_V	Makefile	/^AUX_V			=	$(addprefix $(P_VALIDATION)$(P_AUX_V), $(F_AUX_V))$/;"	m
BBLK	include/ansi_color.h	27;"	d
BBLU	include/ansi_color.h	31;"	d
BCYN	include/ansi_color.h	33;"	d
BGRN	include/ansi_color.h	29;"	d
BHBLK	include/ansi_color.h	77;"	d
BHBLU	include/ansi_color.h	81;"	d
BHCYN	include/ansi_color.h	83;"	d
BHGRN	include/ansi_color.h	79;"	d
BHMAG	include/ansi_color.h	82;"	d
BHRED	include/ansi_color.h	78;"	d
BHWHT	include/ansi_color.h	84;"	d
BHYEL	include/ansi_color.h	80;"	d
BLK	include/ansi_color.h	17;"	d
BLKB	include/ansi_color.h	47;"	d
BLKHB	include/ansi_color.h	57;"	d
BLU	include/ansi_color.h	21;"	d
BLUB	include/ansi_color.h	51;"	d
BLUHB	include/ansi_color.h	61;"	d
BMAG	include/ansi_color.h	32;"	d
BRED	include/ansi_color.h	28;"	d
BUFFER_SIZE	include/libft/libft.h	19;"	d
BWHT	include/ansi_color.h	34;"	d
BYEL	include/ansi_color.h	30;"	d
CC	Makefile	/^CC				=	clang$/;"	m
CC	include/libft/Makefile	/^CC			=	clang$/;"	m
CC	include/minilibx-linux/Makefile.mk	/^	CC = clang$/;"	m
CC	include/minilibx-linux/Makefile.mk	/^CC	= gcc$/;"	m
CC	include/minilibx-linux/test/Makefile.mk	/^	CC	= gcc$/;"	m
CC	include/minilibx-linux/test/Makefile.mk	/^	CC = clang$/;"	m
CFLAGS	Makefile	/^CFLAGS			=	#-Wall -Wextra -Werror #-fsanitize=address$/;"	m
CFLAGS	include/libft/Makefile	/^CFLAGS		=	-Wall -Wextra -Werror$/;"	m
CFLAGS	include/minilibx-linux/Makefile.mk	/^CFLAGS	= -O3 -I$(INC)$/;"	m
CFLAGS	include/minilibx-linux/test/Makefile.mk	/^CFLAGS= -I$(INC) -O3 -I.. -g$/;"	m
CUB_FILE_NOT_FOUND	include/defines.h	58;"	d
CUB_H	include/cub.h	14;"	d
CYN	include/ansi_color.h	23;"	d
CYNB	include/ansi_color.h	53;"	d
CYNHB	include/ansi_color.h	63;"	d
DEFINES_H	include/defines.h	15;"	d
DOWN	include/defines.h	19;"	d
EA	include/defines.h	38;"	d
EMPTY_CUB_FILE	include/defines.h	59;"	d
EMPTY_TEXTURE	include/defines.h	64;"	d
END_WITH_INVALID	include/defines.h	55;"	d
ENV_DISPLAY	include/minilibx-linux/mlx_int.h	43;"	d
ERR_NO_TRUECOLOR	include/minilibx-linux/mlx_int.h	45;"	d
ESC	include/defines.h	24;"	d
F_AUX_V	Makefile	/^F_AUX_V			=	exit_and_free.c map_file_aux.c blueprint_aux.c rgb_aux.c$/;"	m
F_GRAPHIC	Makefile	/^F_GRAPHIC		=	start_enviroments.c start_player.c start_texture.c$/;"	m
F_MANDATORY	include/libft/Makefile	/^F_MANDATORY	=	ft_memset.c ft_bzero.c ft_memcpy.c ft_memccpy.c ft_memmove.c \\$/;"	m
F_SRC	Makefile	/^F_SRC			=	main.c $(VALIDATION) $(AUX_V) $(GRAPHIC)$/;"	m
F_VALIDATION	Makefile	/^F_VALIDATION	=	map_file.c texture.c rgb.c blueprint.c$/;"	m
GRAPHIC	Makefile	/^GRAPHIC			=	$(addprefix $(P_GRAPHIC), $(F_GRAPHIC))$/;"	m
GRN	include/ansi_color.h	19;"	d
GRNB	include/ansi_color.h	49;"	d
GRNHB	include/ansi_color.h	59;"	d
HBLK	include/ansi_color.h	67;"	d
HBLU	include/ansi_color.h	71;"	d
HCYN	include/ansi_color.h	73;"	d
HEIGHT	include/defines.h	28;"	d
HGRN	include/ansi_color.h	69;"	d
HMAG	include/ansi_color.h	72;"	d
HRED	include/ansi_color.h	68;"	d
HWHT	include/ansi_color.h	74;"	d
HYEL	include/ansi_color.h	70;"	d
IM1_SX	include/minilibx-linux/test/main.c	7;"	d	file:
IM1_SY	include/minilibx-linux/test/main.c	8;"	d	file:
IM3_SX	include/minilibx-linux/test/main.c	9;"	d	file:
IM3_SY	include/minilibx-linux/test/main.c	10;"	d	file:
INC	Makefile	/^INC				=	-I $(P_INCLUDE) -I $(P_LIBFT) -I $(P_MLX)$/;"	m
INC	include/libft/Makefile	/^INC			=	-I .$/;"	m
INC	include/minilibx-linux/Makefile.mk	/^INC	=%%%%$/;"	m
INC	include/minilibx-linux/test/Makefile.mk	/^INC=%%%%$/;"	m
INCLIB	include/minilibx-linux/test/Makefile.mk	/^INCLIB=$(INC)\/..\/lib$/;"	m
INVALID_ELEMENT	include/defines.h	53;"	d
INVALID_MAP	include/defines.h	69;"	d
INVALID_PLAYER	include/defines.h	71;"	d
LEFT	include/defines.h	20;"	d
LFLAGS	include/minilibx-linux/test/Makefile.mk	/^LFLAGS = -L.. -lmlx -L$(INCLIB) -lXext -lX11 -lm$/;"	m
LIBFT	Makefile	/^LIBFT			=	-L $(P_LIBFT) -l ft$/;"	m
LIBFT_H	include/libft/libft.h	14;"	d
LOCALHOST	include/minilibx-linux/mlx_int.h	44;"	d
MAG	include/ansi_color.h	22;"	d
MAGB	include/ansi_color.h	52;"	d
MAGHB	include/ansi_color.h	62;"	d
MANDATORY	include/libft/Makefile	/^MANDATORY	=	$(addprefix $(P_MANDATORY), $(F_MANDATORY))$/;"	m
MFLAGS	Makefile	/^MFLAGS			=	$/;"	m
MLX	Makefile	/^MLX				=	-L $(P_MLX) -lmlx -Ilmlx -lXext -lX11 -lm $/;"	m
MLX_H	include/minilibx-linux/mlx.h	32;"	d
MLX_INT_H	include/minilibx-linux/mlx_int.h	19;"	d
MLX_MAX_EVENT	include/minilibx-linux/mlx_int.h	40;"	d
MLX_TYPE_SHM	include/minilibx-linux/mlx_int.h	37;"	d
MLX_TYPE_SHM_PIXMAP	include/minilibx-linux/mlx_int.h	36;"	d
MLX_TYPE_XIMAGE	include/minilibx-linux/mlx_int.h	38;"	d
NAME	Makefile	/^NAME			=	cub3D$/;"	m
NAME	include/libft/Makefile	/^NAME		=	libft.a$/;"	m
NAME	include/minilibx-linux/Makefile.mk	/^NAME		= libmlx.a$/;"	m
NAME	include/minilibx-linux/test/Makefile.mk	/^NAME= mlx-test$/;"	m
NAME_UNAME	include/minilibx-linux/Makefile.mk	/^NAME_UNAME	= libmlx_$(UNAME).a$/;"	m
NO	include/defines.h	37;"	d
NOT_FOUND_PLAYER	include/defines.h	70;"	d
NUM_RAYS	include/defines.h	34;"	d
NUM_TEXTURES	include/defines.h	41;"	d
OBJ	Makefile	/^OBJ				=	$(addprefix $(P_OBJ), $(F_SRC:.c=.o))$/;"	m
OBJ	include/libft/Makefile	/^OBJ			=	$(addprefix $(P_OBJ), $(SRC:.c=.o))$/;"	m
OBJ	include/minilibx-linux/Makefile.mk	/^OBJ	= $(addprefix $(OBJ_DIR)\/,$(SRC:%.c=%.o))$/;"	m
OBJ	include/minilibx-linux/test/Makefile.mk	/^OBJ = $(SRC:%.c=%.o)$/;"	m
OBJ_DIR	include/minilibx-linux/Makefile.mk	/^OBJ_DIR = obj$/;"	m
PI	include/defines.h	32;"	d
P_AUX_V	Makefile	/^P_AUX_V			=	aux_v\/$/;"	m
P_GRAPHIC	Makefile	/^P_GRAPHIC		=	graphic\/$/;"	m
P_GUARD	Makefile	/^P_GUARD			=	mkdir -p $(@D)$/;"	m
P_GUARD	include/libft/Makefile	/^P_GUARD		=	mkdir -p $(@D)$/;"	m
P_INCLUDE	Makefile	/^P_INCLUDE		=	include\/$/;"	m
P_LIBFT	Makefile	/^P_LIBFT			=	$(P_INCLUDE)libft\/$/;"	m
P_MANDATORY	include/libft/Makefile	/^P_MANDATORY	=	mandatory\/$/;"	m
P_MLX	Makefile	/^P_MLX			=	$(P_INCLUDE)minilibx-linux\/$/;"	m
P_OBJ	Makefile	/^P_OBJ			=	.\/obj\/$/;"	m
P_OBJ	include/libft/Makefile	/^P_OBJ		=	.\/obj\/$/;"	m
P_SRC	Makefile	/^P_SRC			=	src\/$/;"	m
P_VALIDATION	Makefile	/^P_VALIDATION	=	validation\/$/;"	m
RED	include/ansi_color.h	18;"	d
REDB	include/ansi_color.h	48;"	d
REDHB	include/ansi_color.h	58;"	d
RESET	include/ansi_color.h	87;"	d
RETURN	include/minilibx-linux/mlx_xpm.c	17;"	d	file:
RGB_NOT_SPECIFIED	include/defines.h	66;"	d
RIGHT	include/defines.h	21;"	d
RM	Makefile	/^RM				=	rm -rf$/;"	m
RM	include/libft/Makefile	/^RM			=	rm -rf$/;"	m
SAME_ELEMENT	include/defines.h	54;"	d
SO	include/defines.h	40;"	d
SRC	include/libft/Makefile	/^SRC			=	$(MANDATORY)$/;"	m
SRC	include/minilibx-linux/Makefile.mk	/^SRC	= mlx_init.c mlx_new_window.c mlx_pixel_put.c mlx_loop.c \\$/;"	m
SRC	include/minilibx-linux/test/Makefile.mk	/^SRC = main.c$/;"	m
STRUCT_H	include/struct.h	14;"	d
TEXTURE_HEIGHT	include/defines.h	43;"	d
TEXTURE_NOT_SPECIFIED	include/defines.h	61;"	d
TEXTURE_WIDTH	include/defines.h	42;"	d
TILE	include/defines.h	30;"	d
TOP	include/defines.h	18;"	d
TWO_PI	include/defines.h	33;"	d
UBLK	include/ansi_color.h	37;"	d
UBLU	include/ansi_color.h	41;"	d
UCYN	include/ansi_color.h	43;"	d
UGRN	include/ansi_color.h	39;"	d
UMAG	include/ansi_color.h	42;"	d
UNAME	include/minilibx-linux/Makefile.mk	/^UNAME = $(shell uname)$/;"	m
UNAME	include/minilibx-linux/test/Makefile.mk	/^UNAME := $(shell uname)$/;"	m
URED	include/ansi_color.h	38;"	d
UWHT	include/ansi_color.h	44;"	d
UYEL	include/ansi_color.h	40;"	d
VALIDATION	Makefile	/^VALIDATION		=	$(addprefix $(P_VALIDATION), $(F_VALIDATION))$/;"	m
WARN_SHM_ATTACH	include/minilibx-linux/mlx_int.h	46;"	d
WE	include/defines.h	39;"	d
WHT	include/ansi_color.h	24;"	d
WHTB	include/ansi_color.h	54;"	d
WHTHB	include/ansi_color.h	64;"	d
WIDTH	include/defines.h	27;"	d
WIN1_SX	include/minilibx-linux/test/main.c	5;"	d	file:
WIN1_SY	include/minilibx-linux/test/main.c	6;"	d	file:
WRONG_ARGUMENTS	include/defines.h	51;"	d
WRONG_CUB_TYPE_FILE	include/defines.h	57;"	d
WRONG_RGB	include/defines.h	67;"	d
WRONG_TEXTURE_TYPE_FILE	include/defines.h	62;"	d
XMP_FILE_NOT_FOUND	include/defines.h	63;"	d
X_ShmAttach	include/minilibx-linux/mlx_new_image.c	20;"	d	file:
YEL	include/ansi_color.h	20;"	d
YELB	include/ansi_color.h	50;"	d
YELHB	include/ansi_color.h	60;"	d
addr	include/struct.h	/^	char	*addr;$/;"	m	struct:s_data
at_exit	include/minilibx-linux/test/run_tests.sh	/^at_exit() {$/;"	f
blue	include/struct.h	/^	int	blue;$/;"	m	struct:s_rgb
blueprint	include/struct.h	/^	char		**blueprint; \/\/ just the map$/;"	m	struct:s_mode
bpp	include/minilibx-linux/mlx_int.h	/^	int				bpp;$/;"	m	struct:s_img
bpp	include/struct.h	/^	int		bpp;$/;"	m	struct:s_data
bpp1	include/minilibx-linux/test/main.c	/^int	bpp1;$/;"	v
bpp2	include/minilibx-linux/test/main.c	/^int	bpp2;$/;"	v
bpp3	include/minilibx-linux/test/main.c	/^int	bpp3;$/;"	v
bpp4	include/minilibx-linux/test/main.c	/^int	bpp4;$/;"	v
buf	include/libft/libft.h	/^	char		*buf;$/;"	m	struct:s_variable
cell_rgb	include/struct.h	/^	t_rgb		cell_rgb;$/;"	m	struct:s_mode
check_blueprint	src/validation/blueprint.c	/^void	check_blueprint(t_mode *mode)$/;"	f
check_end_of_file	src/validation/aux_v/map_file_aux.c	/^void	check_end_of_file(t_mode *mode)$/;"	f
check_possibility_space	src/validation/aux_v/blueprint_aux.c	/^static int	check_possibility_space(t_mode *mode, char c, int t_len, int a_len)$/;"	f	file:
check_possibility_zero	src/validation/aux_v/blueprint_aux.c	/^static int	check_possibility_zero(t_mode *mode, char c)$/;"	f	file:
check_spaced_line	src/validation/map_file.c	/^static int	check_spaced_line(char *str_line, int tag)$/;"	f	file:
check_square_space	src/validation/aux_v/blueprint_aux.c	/^void	check_square_space(t_mode *mode, int p, int x)$/;"	f
check_square_zero	src/validation/aux_v/blueprint_aux.c	/^void	check_square_zero(t_mode *mode, int posi, int x)$/;"	f
check_veracity	src/validation/aux_v/map_file_aux.c	/^static int	check_veracity(char *s, int posi)$/;"	f	file:
clean	include/minilibx-linux/configure	/^clean(){$/;"	f
close_all	src/validation/aux_v/exit_and_free.c	/^void	close_all(t_mode *mode, char *reason)$/;"	f
close_aplication	src/graphic/handle_events.c	/^int	close_aplication(t_mode *mode)$/;"	f
cmap	include/minilibx-linux/mlx_int.h	/^	Colormap	cmap;$/;"	m	struct:s_xvar
col	include/minilibx-linux/mlx_int.h	/^	int		col;$/;"	m	struct:s_xpm_col
color	include/minilibx-linux/mlx_int.h	/^	int		color;$/;"	m	struct:s_col_name
color_map_1	include/minilibx-linux/test/main.c	/^int	color_map_1(void *win,int w,int h)$/;"	f
color_map_2	include/minilibx-linux/test/main.c	/^int	color_map_2(unsigned char *data,int bpp,int sl,int w,int h,int endian, int type)$/;"	f
data	include/minilibx-linux/mlx_int.h	/^	char			*data;$/;"	m	struct:s_img
data1	include/minilibx-linux/test/main.c	/^char	*data1;$/;"	v
data2	include/minilibx-linux/test/main.c	/^char	*data2;$/;"	v
data3	include/minilibx-linux/test/main.c	/^char	*data3;$/;"	v
data4	include/minilibx-linux/test/main.c	/^char	*data4;$/;"	v
decrgb	include/minilibx-linux/mlx_int.h	/^	int			decrgb[6];$/;"	m	struct:s_xvar
depth	include/minilibx-linux/mlx_int.h	/^	int			depth;$/;"	m	struct:s_xvar
display	include/minilibx-linux/mlx_int.h	/^	Display		*display;$/;"	m	struct:s_xvar
do_flush	include/minilibx-linux/mlx_int.h	/^	int			do_flush;$/;"	m	struct:s_xvar
e_bool	include/struct.h	/^typedef enum e_bool$/;"	g
ea	include/struct.h	/^	int			ea;$/;"	m	struct:s_mode
ea	include/struct.h	/^	t_data	ea;$/;"	m	struct:s_texture
end_loop	include/minilibx-linux/mlx_int.h	/^	int 		end_loop;$/;"	m	struct:s_xvar
endian	include/struct.h	/^	int		endian;$/;"	m	struct:s_data
endian1	include/minilibx-linux/test/main.c	/^int	endian1;$/;"	v
endian2	include/minilibx-linux/test/main.c	/^int	endian2;$/;"	v
endian3	include/minilibx-linux/test/main.c	/^int	endian3;$/;"	v
endian4	include/minilibx-linux/test/main.c	/^int	endian4;$/;"	v
expose_hook	include/minilibx-linux/mlx_int.h	/^	int					(*expose_hook)();$/;"	m	struct:s_win_list
expose_param	include/minilibx-linux/mlx_int.h	/^	void				*expose_param;$/;"	m	struct:s_win_list
expose_win1	include/minilibx-linux/test/main.c	/^int	expose_win1(void *p)$/;"	f
expose_win2	include/minilibx-linux/test/main.c	/^int	expose_win2(void *p)$/;"	f
false	include/struct.h	/^	false,$/;"	e	enum:e_bool
file_lines	include/struct.h	/^	int			file_lines;$/;"	m	struct:s_mode
find_rgb	src/validation/rgb.c	/^void	find_rgb(t_mode *mode, int i)$/;"	f
find_texture	src/validation/texture.c	/^void	find_texture(t_mode *mode, int i)$/;"	f
floor_rgb	include/struct.h	/^	t_rgb		floor_rgb;$/;"	m	struct:s_mode
format	include/minilibx-linux/mlx_int.h	/^	int				format;$/;"	m	struct:s_img
found_letter	include/struct.h	/^	int			found_letter;$/;"	m	struct:s_mode
free_images	src/graphic/start_enviroments.c	/^static void	free_images(t_mode *mode)$/;"	f	file:
free_mlx	src/graphic/handle_events.c	/^static void	free_mlx(t_mode *mode)$/;"	f	file:
free_struct	src/validation/aux_v/exit_and_free.c	/^void	free_struct(t_mode *mode)$/;"	f
ft_atoi	include/libft/mandatory/ft_atoi.c	/^int	ft_atoi(const char *nptr)$/;"	f
ft_bzero	include/libft/mandatory/ft_bzero.c	/^void	ft_bzero(void *s, size_t len)$/;"	f
ft_calloc	include/libft/mandatory/ft_calloc.c	/^void	*ft_calloc(size_t nmemb, size_t size)$/;"	f
ft_check_is_number	include/libft/mandatory/ft_check_is_number.c	/^int	ft_check_is_number(const char *str)$/;"	f
ft_cmp	include/libft/mandatory/ft_cmp.c	/^int	ft_cmp(const void *string1, const void *string2)$/;"	f
ft_cmp_by_start	include/libft/mandatory/ft_cmp_by_start.c	/^int	ft_cmp_by_start(const void *string1, const void *string2, int start)$/;"	f
ft_countword	include/libft/mandatory/ft_split.c	/^static size_t	ft_countword(const char *s, char c)$/;"	f	file:
ft_free	include/libft/mandatory/ft_split.c	/^static char	**ft_free(char **tab, size_t len)$/;"	f	file:
ft_free_double_ptr	include/libft/mandatory/ft_free_double_ptr.c	/^char	*ft_free_double_ptr(char **str)$/;"	f
ft_free_null	include/libft/mandatory/ft_free_null.c	/^char	*ft_free_null(char **string)$/;"	f
ft_free_triple_ptr	include/libft/mandatory/ft_free_triple_ptr.c	/^char	*ft_free_triple_ptr(char ***str)$/;"	f
ft_free_void_ptr	include/libft/mandatory/ft_free_void_ptr.c	/^void	ft_free_void_ptr(void **ptr)$/;"	f
ft_get_next_line	include/libft/mandatory/ft_get_next_line.c	/^int	ft_get_next_line(int fd, char **line)$/;"	f
ft_guide	include/libft/mandatory/ft_get_next_line.c	/^static int	ft_guide(int index, char **plus, char **line)$/;"	f	file:
ft_isalnum	include/libft/mandatory/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	include/libft/mandatory/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	include/libft/mandatory/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	include/libft/mandatory/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	include/libft/mandatory/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_itoa	include/libft/mandatory/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_lenwrd	include/libft/mandatory/ft_split.c	/^static size_t	ft_lenwrd(char const *s, char c)$/;"	f	file:
ft_memccpy	include/libft/mandatory/ft_memccpy.c	/^void	*ft_memccpy(void *dest, const void *src, int c, size_t n)$/;"	f
ft_memchr	include/libft/mandatory/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	include/libft/mandatory/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	include/libft/mandatory/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f
ft_memmove	include/libft/mandatory/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t n)$/;"	f
ft_memset	include/libft/mandatory/ft_memset.c	/^void	*ft_memset(void *dest, int str, size_t n)$/;"	f
ft_putchar_fd	include/libft/mandatory/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	include/libft/mandatory/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	include/libft/mandatory/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int nb, int fd)$/;"	f
ft_putstr_fd	include/libft/mandatory/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_split	include/libft/mandatory/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f
ft_strchr	include/libft/mandatory/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strdup	include/libft/mandatory/ft_strdup.c	/^char	*ft_strdup(const char *s)$/;"	f
ft_strjoin	include/libft/mandatory/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	include/libft/mandatory/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlcpy	include/libft/mandatory/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dest, const char *src, size_t size)$/;"	f
ft_strlen	include/libft/mandatory/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strmapi	include/libft/mandatory/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	include/libft/mandatory/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strnstr	include/libft/mandatory/ft_strnstr.c	/^char	*ft_strnstr(const char *big, const char *little, size_t len)$/;"	f
ft_strrchr	include/libft/mandatory/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	include/libft/mandatory/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	include/libft/mandatory/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	include/libft/mandatory/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	include/libft/mandatory/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
ft_transfer	include/libft/mandatory/ft_get_next_line.c	/^static int	ft_transfer(char **plus, char **line)$/;"	f	file:
gc	include/minilibx-linux/mlx_int.h	/^	GC					gc;$/;"	m	struct:s_win_list
gc	include/minilibx-linux/mlx_int.h	/^	GC				gc;$/;"	m	struct:s_img
gere_mouse	include/minilibx-linux/test/new_win.c	/^int gere_mouse(int x,int y,int button,void*toto)$/;"	f
get_color	src/graphic/start_texture.c	/^static unsigned int	get_color(t_data *data, int x, int y)$/;"	f	file:
get_lenght	src/graphic/player_movement.c	/^static int	get_lenght(t_mode *mode, float line)$/;"	f	file:
get_player_initial_position	src/graphic/start_player.c	/^static void	get_player_initial_position(t_mode *mode)$/;"	f	file:
get_start_end_from_map	src/validation/map_file.c	/^static void	get_start_end_from_map(t_mode *mode, int file_lines)$/;"	f	file:
get_texture_buffer	src/graphic/start_texture.c	/^static uint32_t	*get_texture_buffer(t_data *img)$/;"	f	file:
get_xlib_include_path	include/minilibx-linux/configure	/^get_xlib_include_path(){$/;"	f
green	include/struct.h	/^	int	green;$/;"	m	struct:s_rgb
has_wall_at	src/graphic/player_movement.c	/^static int	has_wall_at(t_mode *mode, float x, float y)$/;"	f	file:
height	include/minilibx-linux/mlx_int.h	/^	int				height;$/;"	m	struct:s_img
height	include/struct.h	/^	float	height;$/;"	m	struct:s_player
height	include/struct.h	/^	int	height;$/;"	m	struct:s_map_size
hook	include/minilibx-linux/mlx_int.h	/^	int		(*hook)();$/;"	m	struct:s_event_list
hooks	include/minilibx-linux/mlx_int.h	/^	t_event_list		hooks[MLX_MAX_EVENT];$/;"	m	struct:s_win_list
ht	include/struct.h	/^	int			ht;$/;"	m	struct:s_mode
im1	include/minilibx-linux/test/main.c	/^void    *im1;$/;"	v
im2	include/minilibx-linux/test/main.c	/^void	*im2;$/;"	v
im3	include/minilibx-linux/test/main.c	/^void	*im3;$/;"	v
im4	include/minilibx-linux/test/main.c	/^void	*im4;$/;"	v
image	include/minilibx-linux/mlx_int.h	/^	XImage			*image;$/;"	m	struct:s_img
img	include/struct.h	/^	t_data		img;$/;"	m	struct:s_mode
img	include/struct.h	/^	void	*img;$/;"	m	struct:s_data
index	include/libft/libft.h	/^	ssize_t		index;$/;"	m	struct:s_variable
just_close	src/validation/aux_v/exit_and_free.c	/^void	just_close(t_mode *mode)$/;"	f
key_hook	include/minilibx-linux/mlx_int.h	/^	int					(*key_hook)();$/;"	m	struct:s_win_list
key_param	include/minilibx-linux/mlx_int.h	/^	void				*key_param;$/;"	m	struct:s_win_list
key_pressed	src/graphic/handle_events.c	/^int	key_pressed(int keycode, t_mode *mode)$/;"	f
key_release	src/graphic/handle_events.c	/^int	key_release(int key, t_mode *mode)$/;"	f
key_win1	include/minilibx-linux/test/main.c	/^int	key_win1(int key,void *p)$/;"	f
key_win2	include/minilibx-linux/test/main.c	/^int	key_win2(int key,void *p)$/;"	f
key_win3	include/minilibx-linux/test/main.c	/^int	key_win3(int key,void *p)$/;"	f
l_len	include/struct.h	/^	int		l_len;$/;"	m	struct:s_data
local_endian	include/minilibx-linux/test/main.c	/^int	local_endian;$/;"	v
log_error	include/minilibx-linux/configure	/^log_error(){$/;"	f
log_error	include/minilibx-linux/test/run_tests.sh	/^log_error(){$/;"	f
log_info	include/minilibx-linux/configure	/^log_info(){$/;"	f
log_info	include/minilibx-linux/test/run_tests.sh	/^log_info(){$/;"	f
logging	include/minilibx-linux/configure	/^logging(){$/;"	f
logging	include/minilibx-linux/test/run_tests.sh	/^logging(){$/;"	f
look_for_duplicate	src/validation/aux_v/map_file_aux.c	/^void	look_for_duplicate(t_mode *mode, char *target, int i)$/;"	f
look_for_trash	src/validation/aux_v/map_file_aux.c	/^void	look_for_trash(t_mode *mode)$/;"	f
loop_hook	include/minilibx-linux/mlx_int.h	/^	int			(*loop_hook)();$/;"	m	struct:s_xvar
loop_param	include/minilibx-linux/mlx_int.h	/^	void		*loop_param;$/;"	m	struct:s_xvar
main	include/minilibx-linux/test/main.c	/^int	main()$/;"	f
main	include/minilibx-linux/test/new_win.c	/^int main()$/;"	f
main	include/minilibx-linux/test/run_tests.sh	/^main(){$/;"	f
main	src/main.c	/^int	main(int ac, char **av)$/;"	f
map_end_in	include/struct.h	/^	int			map_end_in;$/;"	m	struct:s_mode
map_file	include/struct.h	/^	char		**map_file; \/\/ all the map in the file$/;"	m	struct:s_mode
map_file_redirect	src/validation/map_file.c	/^void	map_file_redirect(t_mode *mode, char *path)$/;"	f
map_size	include/struct.h	/^	t_map_size	map_size;$/;"	m	struct:s_mode
map_start_in	include/struct.h	/^	int			map_start_in;$/;"	m	struct:s_mode
map_valid_bottom_and_top_row	src/validation/blueprint.c	/^static void	map_valid_bottom_and_top_row(t_mode *mode)$/;"	f	file:
map_valid_left_right_column	src/validation/blueprint.c	/^static void	map_valid_left_right_column(t_mode *mode)$/;"	f	file:
map_valid_letter	src/validation/blueprint.c	/^static void	map_valid_letter(t_mode *mode)$/;"	f	file:
map_valid_middle	src/validation/blueprint.c	/^static void	map_valid_middle(t_mode *mode)$/;"	f	file:
mask	include/minilibx-linux/mlx_int.h	/^	int		mask;$/;"	m	struct:s_event_list
mlx	include/minilibx-linux/test/main.c	/^void	*mlx;$/;"	v
mlx	include/minilibx-linux/test/new_win.c	/^void *mlx;$/;"	v
mlx	include/struct.h	/^	t_mlx		mlx;$/;"	m	struct:s_mode
mlx	include/struct.h	/^	void	*mlx;$/;"	m	struct:s_mlx
mlx_X_error	include/minilibx-linux/mlx_new_image.c	/^int	mlx_X_error;$/;"	v
mlx_clear_window	include/minilibx-linux/mlx_clear_window.c	/^int		mlx_clear_window(t_xvar *xvar,t_win_list *win)$/;"	f
mlx_col_name	include/minilibx-linux/mlx_rgb.c	/^struct s_col_name mlx_col_name[] =$/;"	v	typeref:struct:s_col_name
mlx_destroy_display	include/minilibx-linux/mlx_destroy_display.c	/^int	mlx_destroy_display(t_xvar *xvar)$/;"	f
mlx_destroy_image	include/minilibx-linux/mlx_destroy_image.c	/^int	mlx_destroy_image(t_xvar *xvar, t_img *img)$/;"	f
mlx_destroy_window	include/minilibx-linux/mlx_destroy_window.c	/^int	mlx_destroy_window(t_xvar *xvar,t_win_list *win)$/;"	f
mlx_do_key_autorepeatoff	include/minilibx-linux/mlx_hook.c	/^int	mlx_do_key_autorepeatoff(t_xvar *xvar)$/;"	f
mlx_do_key_autorepeaton	include/minilibx-linux/mlx_hook.c	/^int	mlx_do_key_autorepeaton(t_xvar *xvar)$/;"	f
mlx_do_sync	include/minilibx-linux/mlx_hook.c	/^int	mlx_do_sync(t_xvar *xvar)$/;"	f
mlx_expose_hook	include/minilibx-linux/mlx_expose_hook.c	/^int		mlx_expose_hook(t_win_list *win,int (*funct)(),void *param)$/;"	f
mlx_ext_fullscreen	include/minilibx-linux/mlx_ext_randr.c	/^int			mlx_ext_fullscreen(t_xvar *xvar, t_win_list *win, int fullscreen)$/;"	f
mlx_flush_event	include/minilibx-linux/mlx_flush_event.c	/^int	mlx_flush_event(t_xvar *xvar)$/;"	f
mlx_get_color_value	include/minilibx-linux/mlx_get_color_value.c	/^int             mlx_get_color_value(t_xvar *xvar,int color)$/;"	f
mlx_get_data_addr	include/minilibx-linux/mlx_get_data_addr.c	/^char	*mlx_get_data_addr(t_img *img,int *bits_per_pixel,$/;"	f
mlx_get_screen_size	include/minilibx-linux/mlx_screen_size.c	/^int		mlx_get_screen_size(void *mlx_ptr, int *sizex, int *sizey)$/;"	f
mlx_hook	include/minilibx-linux/mlx_hook.c	/^int	mlx_hook(t_win_list *win, int x_event, int x_mask, $/;"	f
mlx_init	include/minilibx-linux/mlx_init.c	/^void	*mlx_init()$/;"	f
mlx_int_anti_resize_win	include/minilibx-linux/mlx_int_anti_resize_win.c	/^int	mlx_int_anti_resize_win(t_xvar *xvar,Window win,int w,int h)$/;"	f
mlx_int_deal_shm	include/minilibx-linux/mlx_init.c	/^int		mlx_int_deal_shm(t_xvar *xvar)$/;"	f
mlx_int_do_nothing	include/minilibx-linux/mlx_int_do_nothing.c	/^int	mlx_int_do_nothing(void *param)$/;"	f
mlx_int_egal_img	include/minilibx-linux/mlx_lib_xpm.c	/^int	mlx_int_egal_img(XImage *img1,XImage *img2)$/;"	f
mlx_int_file_get_rid_comment	include/minilibx-linux/mlx_xpm.c	/^int	mlx_int_file_get_rid_comment(char *ptr, int size)$/;"	f
mlx_int_get_col_name	include/minilibx-linux/mlx_xpm.c	/^int	mlx_int_get_col_name(char *str,int size)$/;"	f
mlx_int_get_good_color	include/minilibx-linux/mlx_get_color_value.c	/^int		mlx_int_get_good_color(t_xvar *xvar,int color)$/;"	f
mlx_int_get_line	include/minilibx-linux/mlx_xpm.c	/^char	*mlx_int_get_line(char *ptr,int *pos,int size)$/;"	f
mlx_int_get_text_rgb	include/minilibx-linux/mlx_xpm.c	/^int	mlx_int_get_text_rgb(char *name, char *end)$/;"	f
mlx_int_get_visual	include/minilibx-linux/mlx_int_get_visual.c	/^int		mlx_int_get_visual(t_xvar *xvar)$/;"	f
mlx_int_new_image	include/minilibx-linux/mlx_new_image.c	/^void	*mlx_int_new_image(t_xvar *xvar,int width, int height,int format)$/;"	f
mlx_int_new_xshm_image	include/minilibx-linux/mlx_new_image.c	/^void	*mlx_int_new_xshm_image(t_xvar *xvar,int width,int height,int format)$/;"	f
mlx_int_param_ButtonPress	include/minilibx-linux/mlx_int_param_event.c	/^int	mlx_int_param_ButtonPress(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f
mlx_int_param_ButtonRelease	include/minilibx-linux/mlx_int_param_event.c	/^int	mlx_int_param_ButtonRelease(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f
mlx_int_param_Expose	include/minilibx-linux/mlx_int_param_event.c	/^int	mlx_int_param_Expose(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f
mlx_int_param_KeyPress	include/minilibx-linux/mlx_int_param_event.c	/^int	mlx_int_param_KeyPress(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f
mlx_int_param_KeyRelease	include/minilibx-linux/mlx_int_param_event.c	/^int	mlx_int_param_KeyRelease(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f
mlx_int_param_MotionNotify	include/minilibx-linux/mlx_int_param_event.c	/^int	mlx_int_param_MotionNotify(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f
mlx_int_param_event	include/minilibx-linux/mlx_int_param_event.c	/^int	(*(mlx_int_param_event[]))() =$/;"	v
mlx_int_param_generic	include/minilibx-linux/mlx_int_param_event.c	/^int	mlx_int_param_generic(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f
mlx_int_param_undef	include/minilibx-linux/mlx_int_param_event.c	/^int	mlx_int_param_undef()$/;"	f
mlx_int_parse_xpm	include/minilibx-linux/mlx_xpm.c	/^void	*mlx_int_parse_xpm(t_xvar *xvar,void *info,int info_size,char *(*f)())$/;"	f
mlx_int_rgb_conversion	include/minilibx-linux/mlx_init.c	/^int		mlx_int_rgb_conversion(t_xvar *xvar)$/;"	f
mlx_int_set_win_event_mask	include/minilibx-linux/mlx_int_set_win_event_mask.c	/^int	mlx_int_set_win_event_mask(t_xvar *xvar)$/;"	f
mlx_int_static_line	include/minilibx-linux/mlx_xpm.c	/^char	*mlx_int_static_line(char **xpm_data,int *pos,int size)$/;"	f
mlx_int_str_str	include/minilibx-linux/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str(char *str,char *find,int len)$/;"	f
mlx_int_str_str_cote	include/minilibx-linux/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str_cote(char *str,char *find,int len)$/;"	f
mlx_int_str_to_wordtab	include/minilibx-linux/mlx_int_str_to_wordtab.c	/^char	**mlx_int_str_to_wordtab(char *str)$/;"	f
mlx_int_wait_first_expose	include/minilibx-linux/mlx_int_wait_first_expose.c	/^int	mlx_int_wait_first_expose(t_xvar *xvar,Window win)$/;"	f
mlx_int_xpm_f_image	include/minilibx-linux/mlx_lib_xpm.c	/^void		*mlx_int_xpm_f_image(t_xvar *xvar,int *width,int *height,$/;"	f
mlx_int_xpm_set_pixel	include/minilibx-linux/mlx_xpm.c	/^int	mlx_int_xpm_set_pixel(t_img *img, char *data, int opp, int col, int x)$/;"	f
mlx_key_hook	include/minilibx-linux/mlx_key_hook.c	/^int		mlx_key_hook(t_win_list *win,int (*funct)(),void *param)$/;"	f
mlx_loop	include/minilibx-linux/mlx_loop.c	/^int			mlx_loop(t_xvar *xvar)$/;"	f
mlx_loop_end	include/minilibx-linux/mlx_loop.c	/^int			mlx_loop_end(t_xvar *xvar)$/;"	f
mlx_loop_hook	include/minilibx-linux/mlx_loop_hook.c	/^int	mlx_loop_hook(t_xvar *xvar,int (*funct)(),void *param)$/;"	f
mlx_mouse_get_pos	include/minilibx-linux/mlx_mouse.c	/^int		mlx_mouse_get_pos(t_xvar *xvar, t_win_list *win, \\$/;"	f
mlx_mouse_hide	include/minilibx-linux/mlx_mouse.c	/^int		mlx_mouse_hide(t_xvar *xvar, t_win_list *win)$/;"	f
mlx_mouse_hook	include/minilibx-linux/mlx_mouse_hook.c	/^int		mlx_mouse_hook(t_win_list *win,int (*funct)(),void *param)$/;"	f
mlx_mouse_move	include/minilibx-linux/mlx_mouse.c	/^int		mlx_mouse_move(t_xvar *xvar, t_win_list *win, int x, int y)$/;"	f
mlx_mouse_show	include/minilibx-linux/mlx_mouse.c	/^int		mlx_mouse_show(t_xvar *xvar, t_win_list *win)$/;"	f
mlx_new_image	include/minilibx-linux/mlx_new_image.c	/^void	*mlx_new_image(t_xvar *xvar,int width, int height)$/;"	f
mlx_new_image2	include/minilibx-linux/mlx_new_image.c	/^void	*mlx_new_image2(t_xvar *xvar,int width, int height)$/;"	f
mlx_new_window	include/minilibx-linux/mlx_new_window.c	/^void	*mlx_new_window(t_xvar *xvar,int size_x,int size_y,char *title)$/;"	f
mlx_pixel_put	include/minilibx-linux/mlx_pixel_put.c	/^int		mlx_pixel_put(t_xvar *xvar,t_win_list *win,$/;"	f
mlx_put_image_to_window	include/minilibx-linux/mlx_put_image_to_window.c	/^int	mlx_put_image_to_window(t_xvar *xvar,t_win_list *win,t_img *img,$/;"	f
mlx_set_font	include/minilibx-linux/mlx_set_font.c	/^void	mlx_set_font(t_xvar *xvar, t_win_list *win, char *name)$/;"	f
mlx_string_put	include/minilibx-linux/mlx_string_put.c	/^int		mlx_string_put(t_xvar *xvar,t_win_list *win,$/;"	f
mlx_xpm_file_to_image	include/minilibx-linux/mlx_lib_xpm.c	/^void	*mlx_xpm_file_to_image(t_xvar *xvar,char *filename,$/;"	f
mlx_xpm_file_to_image	include/minilibx-linux/mlx_xpm.c	/^void	*mlx_xpm_file_to_image(t_xvar *xvar,char *file,int *width,int *height)$/;"	f
mlx_xpm_to_image	include/minilibx-linux/mlx_lib_xpm.c	/^void	*mlx_xpm_to_image(t_xvar *xvar,char **data,int *width,int *height)$/;"	f
mlx_xpm_to_image	include/minilibx-linux/mlx_xpm.c	/^void	*mlx_xpm_to_image(t_xvar *xvar,char **xpm_data,int *width,int *height)$/;"	f
mouse_hook	include/minilibx-linux/mlx_int.h	/^	int					(*mouse_hook)();$/;"	m	struct:s_win_list
mouse_param	include/minilibx-linux/mlx_int.h	/^	void				*mouse_param;$/;"	m	struct:s_win_list
mouse_win1	include/minilibx-linux/test/main.c	/^int	mouse_win1(int button,int x,int y, void *p)$/;"	f
mouse_win2	include/minilibx-linux/test/main.c	/^int	mouse_win2(int button,int x,int y, void *p)$/;"	f
mouse_win3	include/minilibx-linux/test/main.c	/^int	mouse_win3(int x,int y, void *p)$/;"	f
name	include/minilibx-linux/mlx_int.h	/^	char	*name;$/;"	m	struct:s_col_name
name	include/minilibx-linux/mlx_int.h	/^	int		name;$/;"	m	struct:s_xpm_col
next	include/minilibx-linux/mlx_int.h	/^	struct s_win_list	*next;$/;"	m	struct:s_win_list	typeref:struct:s_win_list::s_win_list
no	include/struct.h	/^	int			no;$/;"	m	struct:s_mode
no	include/struct.h	/^	t_data	no;$/;"	m	struct:s_texture
orientation	include/struct.h	/^	int		orientation;$/;"	m	struct:s_player
param	include/minilibx-linux/mlx_int.h	/^	void	*param;$/;"	m	struct:s_event_list
parse_args	include/minilibx-linux/configure	/^parse_args(){$/;"	f
path_existance	src/validation/map_file.c	/^static void	path_existance(t_mode *mode, char *path)$/;"	f	file:
pix	include/minilibx-linux/mlx_int.h	/^	Pixmap			pix;$/;"	m	struct:s_img
player	include/struct.h	/^	t_player	player;$/;"	m	struct:s_mode
player_movement	src/graphic/player_movement.c	/^void	player_movement(t_mode *mode)$/;"	f
pos	include/struct.h	/^	t_pos	pos;$/;"	m	struct:s_data
private_cmap	include/minilibx-linux/mlx_int.h	/^	int			private_cmap;$/;"	m	struct:s_xvar
pshm_format	include/minilibx-linux/mlx_int.h	/^	int			pshm_format;$/;"	m	struct:s_xvar
read_map	src/graphic/start_player.c	/^static void	read_map(t_mode *mode)$/;"	f	file:
red	include/struct.h	/^	int	red;$/;"	m	struct:s_rgb
rgb_aux_separate_ptr	src/validation/aux_v/rgb_aux.c	/^int	rgb_aux_separate_ptr(char *str)$/;"	f
rgb_c	include/struct.h	/^	int			rgb_c;$/;"	m	struct:s_mode
rgb_exists	src/validation/aux_v/rgb_aux.c	/^void	rgb_exists(t_mode *m)$/;"	f
rgb_f	include/struct.h	/^	int			rgb_f;$/;"	m	struct:s_mode
rgb_separate_ptr	src/validation/rgb.c	/^static void	rgb_separate_ptr(t_mode *mode, int i, int x, int d)$/;"	f	file:
rgb_separate_ptr_cont	src/validation/rgb.c	/^static void	rgb_separate_ptr_cont(t_mode *mode, char ***temp)$/;"	f	file:
rgb_setup_to_struct	src/validation/rgb.c	/^static t_rgb	rgb_setup_to_struct(t_mode *mode, int tag)$/;"	f	file:
rgb_validation_setup_colors_struct	src/validation/rgb.c	/^static void	rgb_validation_setup_colors_struct(t_mode *mode)$/;"	f	file:
root	include/minilibx-linux/mlx_int.h	/^	Window		root;$/;"	m	struct:s_xvar
rotation_angle	include/struct.h	/^	float	rotation_angle;$/;"	m	struct:s_player
s_col_name	include/minilibx-linux/mlx_int.h	/^struct	s_col_name$/;"	s
s_data	include/struct.h	/^typedef struct s_data$/;"	s
s_event_list	include/minilibx-linux/mlx_int.h	/^typedef struct	s_event_list$/;"	s
s_img	include/minilibx-linux/mlx_int.h	/^typedef struct	s_img$/;"	s
s_map_size	include/struct.h	/^typedef struct s_map_size$/;"	s
s_mlx	include/struct.h	/^typedef struct s_mlx$/;"	s
s_mode	include/struct.h	/^typedef struct s_mode$/;"	s
s_player	include/struct.h	/^typedef struct s_player$/;"	s
s_pos	include/struct.h	/^typedef struct s_pos$/;"	s
s_rgb	include/struct.h	/^typedef struct s_rgb$/;"	s
s_texture	include/struct.h	/^typedef struct s_texture$/;"	s
s_variable	include/libft/libft.h	/^typedef struct s_variable$/;"	s
s_win_list	include/minilibx-linux/mlx_int.h	/^typedef struct	s_win_list$/;"	s
s_xpm_col	include/minilibx-linux/mlx_int.h	/^typedef	struct	s_xpm_col$/;"	s
s_xvar	include/minilibx-linux/mlx_int.h	/^typedef struct	s_xvar$/;"	s
save_initial_angle	src/graphic/start_player.c	/^static void	save_initial_angle(t_mode *mode)$/;"	f	file:
save_initial_orientation	src/graphic/start_player.c	/^static void	save_initial_orientation(t_mode *mode, char facing)$/;"	f	file:
saved_mode	include/minilibx-linux/mlx_ext_randr.c	/^RRMode	saved_mode = 0;$/;"	v
screen	include/minilibx-linux/mlx_int.h	/^	int			screen;$/;"	m	struct:s_xvar
set_blueprint	src/validation/aux_v/blueprint_aux.c	/^void	set_blueprint(t_mode *mode)$/;"	f
shm	include/minilibx-linux/mlx_int.h	/^	XShmSegmentInfo	shm;$/;"	m	struct:s_img
shm_att_pb	include/minilibx-linux/mlx_new_image.c	/^int	shm_att_pb(Display *d,XErrorEvent *ev)$/;"	f
show_help	include/minilibx-linux/configure	/^show_help(){$/;"	f
side_direction	include/struct.h	/^	int		side_direction;$/;"	m	struct:s_player
sigint_handler	include/minilibx-linux/test/run_tests.sh	/^sigint_handler(){$/;"	f
size_line	include/minilibx-linux/mlx_int.h	/^	int				size_line;$/;"	m	struct:s_img
skip_space_cmp	src/validation/aux_v/map_file_aux.c	/^int	skip_space_cmp(const void *s1, const void *s2, size_t n)$/;"	f
sl1	include/minilibx-linux/test/main.c	/^int	sl1;$/;"	v
sl2	include/minilibx-linux/test/main.c	/^int	sl2;$/;"	v
sl3	include/minilibx-linux/test/main.c	/^int	sl3;$/;"	v
sl4	include/minilibx-linux/test/main.c	/^int	sl4;$/;"	v
so	include/struct.h	/^	int			so;$/;"	m	struct:s_mode
so	include/struct.h	/^	t_data	so;$/;"	m	struct:s_texture
sprites	include/struct.h	/^	t_texture	sprites;$/;"	m	struct:s_mode
sprites	src/graphic/start_texture.c	/^static void	sprites(t_data *img, void *mlx, char *path)$/;"	f	file:
start_enviroments	src/graphic/start_enviroments.c	/^void	start_enviroments(t_mode *mode)$/;"	f
start_game	src/main.c	/^static void	start_game(t_mode *mode)$/;"	f	file:
start_player_variables	src/graphic/start_player.c	/^void	start_player_variables(t_mode *mode)$/;"	f
start_textures	src/graphic/start_texture.c	/^void	start_textures(t_mode *mode)$/;"	f
store_map_file	src/validation/map_file.c	/^static void	store_map_file(t_mode *mode, int lines, char *path)$/;"	f	file:
strlcpy_is_not_posix	include/minilibx-linux/mlx_xpm.c	/^unsigned int	strlcpy_is_not_posix(char *dest, char *src, unsigned int size)$/;"	f
t_bool	include/struct.h	/^}	t_bool;$/;"	t	typeref:enum:e_bool
t_data	include/struct.h	/^}	t_data;$/;"	t	typeref:struct:s_data
t_event_list	include/minilibx-linux/mlx_int.h	/^}				t_event_list;$/;"	t	typeref:struct:s_event_list
t_img	include/minilibx-linux/mlx_int.h	/^}				t_img;$/;"	t	typeref:struct:s_img
t_map_size	include/struct.h	/^}	t_map_size;$/;"	t	typeref:struct:s_map_size
t_mlx	include/struct.h	/^}	t_mlx;$/;"	t	typeref:struct:s_mlx
t_mode	include/struct.h	/^}	t_mode;$/;"	t	typeref:struct:s_mode
t_player	include/struct.h	/^}	t_player;$/;"	t	typeref:struct:s_player
t_pos	include/struct.h	/^}	t_pos;$/;"	t	typeref:struct:s_pos
t_rgb	include/struct.h	/^}	t_rgb;$/;"	t	typeref:struct:s_rgb
t_texture	include/struct.h	/^}	t_texture;$/;"	t	typeref:struct:s_texture
t_variable	include/libft/libft.h	/^}	t_variable;$/;"	t	typeref:struct:s_variable
t_win_list	include/minilibx-linux/mlx_int.h	/^}				t_win_list;$/;"	t	typeref:struct:s_win_list
t_xpm_col	include/minilibx-linux/mlx_int.h	/^}				t_xpm_col;$/;"	t	typeref:struct:s_xpm_col
t_xvar	include/minilibx-linux/mlx_int.h	/^}				t_xvar;$/;"	t	typeref:struct:s_xvar
temp_color	include/struct.h	/^	char		**temp_color;$/;"	m	struct:s_mode
temp_rgb	include/struct.h	/^	char		***temp_rgb;$/;"	m	struct:s_mode
temp_texture	include/struct.h	/^	char		***temp_texture;$/;"	m	struct:s_mode
test_default_main	include/minilibx-linux/test/run_tests.sh	/^test_default_main(){$/;"	f
texture_exists	src/validation/texture.c	/^static void	texture_exists(t_mode *m, int i)$/;"	f	file:
texture_extension	src/validation/texture.c	/^static void	texture_extension(t_mode *mode)$/;"	f	file:
texture_path	include/struct.h	/^	char		***texture_path; \/\/AQUIII$/;"	m	struct:s_mode
texture_valid_path_and_empty	src/validation/texture.c	/^static void	texture_valid_path_and_empty(t_mode *mode)$/;"	f	file:
textures	include/struct.h	/^	uint32_t	*textures[NUM_TEXTURES];$/;"	m	struct:s_mode
tmp	include/libft/libft.h	/^	char		*tmp;$/;"	m	struct:s_variable
true	include/struct.h	/^	true$/;"	e	enum:e_bool
turn_direction	include/struct.h	/^	int		turn_direction;$/;"	m	struct:s_player
turn_speed	include/struct.h	/^	float	turn_speed;$/;"	m	struct:s_player
type	include/minilibx-linux/mlx_int.h	/^	int				type;$/;"	m	struct:s_img
update_loop	src/graphic/update_loop.c	/^int	update_loop(t_mode *mode)$/;"	f
update_variable	src/graphic/update_loop.c	/^static void	update_variable(t_mode *mode)$/;"	f	file:
use_xshm	include/minilibx-linux/mlx_int.h	/^	int			use_xshm;$/;"	m	struct:s_xvar
valid_comma	src/validation/aux_v/rgb_aux.c	/^void	valid_comma(t_mode *mode, char *str, int comma, int i)$/;"	f
valid_comma_end	src/validation/aux_v/rgb_aux.c	/^static void	valid_comma_end(t_mode *mode, char *str)$/;"	f	file:
visual	include/minilibx-linux/mlx_int.h	/^	Visual		*visual;$/;"	m	struct:s_xvar
walk_direction	include/struct.h	/^	int		walk_direction;$/;"	m	struct:s_player
walk_speed	include/struct.h	/^	float	walk_speed;$/;"	m	struct:s_player
we	include/struct.h	/^	int			we;$/;"	m	struct:s_mode
we	include/struct.h	/^	t_data	we;$/;"	m	struct:s_texture
width	include/minilibx-linux/mlx_int.h	/^	int				width;$/;"	m	struct:s_img
width	include/struct.h	/^	float	width;$/;"	m	struct:s_player
width	include/struct.h	/^	int	width;$/;"	m	struct:s_map_size
win	include/struct.h	/^	void	*win;$/;"	m	struct:s_mlx
win1	include/minilibx-linux/test/main.c	/^void	*win1;$/;"	v
win1	include/minilibx-linux/test/new_win.c	/^void *win1;$/;"	v
win2	include/minilibx-linux/test/main.c	/^void    *win2;$/;"	v
win2	include/minilibx-linux/test/new_win.c	/^void *win2;$/;"	v
win3	include/minilibx-linux/test/main.c	/^void    *win3;$/;"	v
win_count	include/minilibx-linux/mlx_loop.c	/^static int	win_count(t_xvar *xvar)$/;"	f	file:
win_list	include/minilibx-linux/mlx_int.h	/^	t_win_list	*win_list;$/;"	m	struct:s_xvar
window	include/minilibx-linux/mlx_int.h	/^	Window				window;$/;"	m	struct:s_win_list
wm_delete_window	include/minilibx-linux/mlx_int.h	/^	Atom		wm_delete_window;$/;"	m	struct:s_xvar
wm_protocols	include/minilibx-linux/mlx_int.h	/^	Atom		wm_protocols;$/;"	m	struct:s_xvar
x	include/struct.h	/^	float	x;$/;"	m	struct:s_player
x	include/struct.h	/^	int	x;$/;"	m	struct:s_pos
xpm1_x	include/minilibx-linux/test/main.c	/^int	xpm1_x;$/;"	v
xpm1_y	include/minilibx-linux/test/main.c	/^int	xpm1_y;$/;"	v
y	include/struct.h	/^	float	y;$/;"	m	struct:s_player
y	include/struct.h	/^	int	y;$/;"	m	struct:s_pos
