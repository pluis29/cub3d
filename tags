!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AUX	Makefile	/^AUX				=	$(addprefix $(P_AUX), $(F_AUX))$/;"	m
BUFFER_SIZE	include/libft/libft.h	19;"	d
CC	Makefile	/^CC				=	clang$/;"	m
CC	include/libft/Makefile	/^CC			=	clang$/;"	m
CFLAGS	Makefile	/^CFLAGS			=	#-Wall -Wextra -Werror #-fsanitize=address$/;"	m
CFLAGS	include/libft/Makefile	/^CFLAGS		=	-Wall -Wextra -Werror$/;"	m
CUB_H	include/cub.h	14;"	d
EMPTY_FILE	include/struct.h	16;"	d
FILE_NOT_FOUND	include/struct.h	19;"	d
FT	Makefile	/^FT				=	ft$/;"	m
F_AUX	Makefile	/^F_AUX			=	exit_and_free.c$/;"	m
F_MANDATORY	include/libft/Makefile	/^F_MANDATORY	=	ft_memset.c ft_bzero.c ft_memcpy.c ft_memccpy.c ft_memmove.c \\$/;"	m
F_MAP_SRC	Makefile	/^F_MAP_SRC		=	map_redirect.c texture.c rgb.c$/;"	m
F_SRC	Makefile	/^F_SRC			=	main.c $(AUX) $(MAP_SRC)$/;"	m
INC	Makefile	/^INC				=	-I $(P_INCLUDE) -I $(P_LIBFT)$/;"	m
INC	include/libft/Makefile	/^INC			=	-I .$/;"	m
LIBFT	Makefile	/^LIBFT			=	-L $(P_LIBFT) -l $(FT)$/;"	m
LIBFT_H	include/libft/libft.h	14;"	d
MANDATORY	include/libft/Makefile	/^MANDATORY	=	$(addprefix $(P_MANDATORY), $(F_MANDATORY))$/;"	m
MAP_SRC	Makefile	/^MAP_SRC			=	$(addprefix $(P_MAP_SRC), $(F_MAP_SRC))$/;"	m
NAME	Makefile	/^NAME			=	cub3d$/;"	m
NAME	include/libft/Makefile	/^NAME		=	libft.a$/;"	m
OBJ	Makefile	/^OBJ				=	$(addprefix $(P_OBJ), $(F_SRC:.c=.o))$/;"	m
OBJ	include/libft/Makefile	/^OBJ			=	$(addprefix $(P_OBJ), $(SRC:.c=.o))$/;"	m
P_AUX	Makefile	/^P_AUX			=	aux\/$/;"	m
P_GUARD	Makefile	/^P_GUARD			=	mkdir -p $(@D)$/;"	m
P_GUARD	include/libft/Makefile	/^P_GUARD		=	mkdir -p $(@D)$/;"	m
P_INCLUDE	Makefile	/^P_INCLUDE		=	include\/$/;"	m
P_LIBFT	Makefile	/^P_LIBFT			=	$(P_INCLUDE)libft\/$/;"	m
P_MANDATORY	include/libft/Makefile	/^P_MANDATORY	=	mandatory\/$/;"	m
P_MAP_SRC	Makefile	/^P_MAP_SRC		=	map_src\/$/;"	m
P_OBJ	Makefile	/^P_OBJ			=	.\/obj\/$/;"	m
P_OBJ	include/libft/Makefile	/^P_OBJ		=	.\/obj\/$/;"	m
P_SRC	Makefile	/^P_SRC			=	src\/$/;"	m
RGB	include/struct.h	/^	RGB$/;"	e	enum:e_state
RGB_NOT_SPECIFIED	include/struct.h	22;"	d
RM	Makefile	/^RM				=	rm -rf$/;"	m
RM	include/libft/Makefile	/^RM			=	rm -rf$/;"	m
SRC	include/libft/Makefile	/^SRC			=	$(MANDATORY)$/;"	m
STRUCT_H	include/struct.h	14;"	d
TEXTURE	include/struct.h	/^	TEXTURE,$/;"	e	enum:e_state
TEXTURE_NOT_SPECIFIED	include/struct.h	21;"	d
WRONG_ARGUMENTS	include/struct.h	20;"	d
WRONG_CUB_TYPE_FILE	include/struct.h	17;"	d
WRONG_RGB	include/struct.h	23;"	d
WRONG_TEXTURE_TYPE_FILE	include/struct.h	18;"	d
all_map	include/struct.h	/^	char	**all_map;$/;"	m	struct:s_mode
aux_color	include/struct.h	/^	char	**aux_color;$/;"	m	struct:s_mode
blue	include/struct.h	/^	int	blue;$/;"	m	struct:s_rgb
buf	include/libft/libft.h	/^	char		*buf;$/;"	m	struct:s_variable
cell_rgb	include/struct.h	/^	t_rgb	cell_rgb;$/;"	m	struct:s_mode
close_all	src/aux/exit_and_free.c	/^void	close_all(t_mode *mode, char *reason)$/;"	f
e_bool	include/struct.h	/^typedef enum e_bool$/;"	g
e_state	include/struct.h	/^typedef enum e_state$/;"	g
false	include/struct.h	/^	false,$/;"	e	enum:e_bool
find_rgb	src/map_src/rgb.c	/^void	find_rgb(t_mode *mode, int i)$/;"	f
find_texture	src/map_src/texture.c	/^void	find_texture(t_mode *mode, int i)$/;"	f
floor_rgb	include/struct.h	/^	t_rgb	floor_rgb;$/;"	m	struct:s_mode
free_struct	src/aux/exit_and_free.c	/^static void	free_struct(t_mode *mode)$/;"	f	file:
ft_atoi	include/libft/mandatory/ft_atoi.c	/^int	ft_atoi(const char *nptr)$/;"	f
ft_bzero	include/libft/mandatory/ft_bzero.c	/^void	ft_bzero(void *s, size_t len)$/;"	f
ft_calloc	include/libft/mandatory/ft_calloc.c	/^void	*ft_calloc(size_t nmemb, size_t size)$/;"	f
ft_checkIsNumber	include/libft/mandatory/ft_checkIsNumber.c	/^int ft_checkIsNumber(const char *str)$/;"	f
ft_cmp	include/libft/mandatory/ft_cmp.c	/^int	ft_cmp(const void *string1, const void *string2)$/;"	f
ft_cmp_byStart	include/libft/mandatory/ft_cmp_byStart.c	/^int	ft_cmp_byStart(const void *string1, const void *string2, int start)$/;"	f
ft_countword	include/libft/mandatory/ft_split.c	/^static size_t	ft_countword(const char *s, char c)$/;"	f	file:
ft_free	include/libft/mandatory/ft_split.c	/^static char	**ft_free(char **tab, size_t len)$/;"	f	file:
ft_free_doublePtr	include/libft/mandatory/ft_free_doublePtr.c	/^char	*ft_free_doublePtr(char **str)$/;"	f
ft_free_null	include/libft/mandatory/ft_free_null.c	/^char	*ft_free_null(char **string)$/;"	f
ft_free_triplePtr	include/libft/mandatory/ft_free_triplePtr.c	/^char	*ft_free_triplePtr(char ***str)$/;"	f
ft_get_next_line	include/libft/mandatory/ft_get_next_line.c	/^int	ft_get_next_line(int fd, char **line)$/;"	f
ft_guide	include/libft/mandatory/ft_get_next_line.c	/^static int	ft_guide(int index, char **plus, char **line)$/;"	f	file:
ft_isalnum	include/libft/mandatory/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	include/libft/mandatory/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	include/libft/mandatory/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	include/libft/mandatory/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	include/libft/mandatory/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_itoa	include/libft/mandatory/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_lenwrd	include/libft/mandatory/ft_split.c	/^static size_t	ft_lenwrd(char const *s, char c)$/;"	f	file:
ft_memccpy	include/libft/mandatory/ft_memccpy.c	/^void	*ft_memccpy(void *dest, const void *src, int c, size_t n)$/;"	f
ft_memchr	include/libft/mandatory/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	include/libft/mandatory/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	include/libft/mandatory/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f
ft_memmove	include/libft/mandatory/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t n)$/;"	f
ft_memset	include/libft/mandatory/ft_memset.c	/^void	*ft_memset(void *dest, int str, size_t n)$/;"	f
ft_putchar_fd	include/libft/mandatory/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	include/libft/mandatory/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	include/libft/mandatory/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int nb, int fd)$/;"	f
ft_putstr_fd	include/libft/mandatory/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_split	include/libft/mandatory/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f
ft_strchr	include/libft/mandatory/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strdup	include/libft/mandatory/ft_strdup.c	/^char	*ft_strdup(const char *s)$/;"	f
ft_strjoin	include/libft/mandatory/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	include/libft/mandatory/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlcpy	include/libft/mandatory/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dest, const char *src, size_t size)$/;"	f
ft_strlen	include/libft/mandatory/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strmapi	include/libft/mandatory/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	include/libft/mandatory/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strnstr	include/libft/mandatory/ft_strnstr.c	/^char	*ft_strnstr(const char *big, const char *little, size_t len)$/;"	f
ft_strrchr	include/libft/mandatory/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	include/libft/mandatory/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	include/libft/mandatory/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	include/libft/mandatory/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	include/libft/mandatory/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
ft_transfer	include/libft/mandatory/ft_get_next_line.c	/^static int	ft_transfer(char **plus, char **line)$/;"	f	file:
green	include/struct.h	/^	int	green;$/;"	m	struct:s_rgb
index	include/libft/libft.h	/^	ssize_t		index;$/;"	m	struct:s_variable
just_close	src/aux/exit_and_free.c	/^void	just_close(t_mode *mode)$/;"	f
main	src/main.c	/^int	main(int ac, char *av[])$/;"	f
map_existance	src/map_src/map_redirect.c	/^static void	map_existance(t_mode *mode, char **av)$/;"	f	file:
map_fd	include/struct.h	/^	int		map_fd;$/;"	m	struct:s_mode
map_path	include/struct.h	/^	char	*map_path;$/;"	m	struct:s_mode
map_validation	src/map_src/map_redirect.c	/^int	map_validation(t_mode *mode, char **av)$/;"	f
read_map_file	src/map_src/map_redirect.c	/^static void	read_map_file(t_mode *mode, int lines)$/;"	f	file:
red	include/struct.h	/^	int	red;$/;"	m	struct:s_rgb
rgb_c	include/struct.h	/^	int		rgb_c;$/;"	m	struct:s_mode
rgb_f	include/struct.h	/^	int		rgb_f;$/;"	m	struct:s_mode
rgb_separatePtr	src/map_src/rgb.c	/^static void	rgb_separatePtr(t_mode *mode, char ***color, int i, int x, int d)$/;"	f	file:
rgb_setup_toStruct	src/map_src/rgb.c	/^static t_rgb	rgb_setup_toStruct(t_mode *mode, int tag)$/;"	f	file:
rgb_validation_Setup_colorsStruct	src/map_src/rgb.c	/^static void	rgb_validation_Setup_colorsStruct(t_mode *mode)$/;"	f	file:
s_mode	include/struct.h	/^typedef struct s_mode$/;"	s
s_rgb	include/struct.h	/^typedef struct s_rgb$/;"	s
s_utils	include/struct.h	/^typedef struct s_utils$/;"	s
s_variable	include/libft/libft.h	/^typedef struct s_variable$/;"	s
t_bool	include/struct.h	/^}	t_bool;$/;"	t	typeref:enum:e_bool
t_mode	include/struct.h	/^}	t_mode;$/;"	t	typeref:struct:s_mode
t_rgb	include/struct.h	/^}	t_rgb;$/;"	t	typeref:struct:s_rgb
t_state	include/struct.h	/^}	t_state;$/;"	t	typeref:enum:e_state
t_utils	include/struct.h	/^}	t_utils;$/;"	t	typeref:struct:s_utils
t_variable	include/libft/libft.h	/^}	t_variable;$/;"	t	typeref:struct:s_variable
texture	include/struct.h	/^	char	***texture;$/;"	m	struct:s_utils
texture_EA	include/struct.h	/^	int		texture_EA;$/;"	m	struct:s_mode
texture_NO	include/struct.h	/^	int		texture_NO;$/;"	m	struct:s_mode
texture_SO	include/struct.h	/^	int		texture_SO;$/;"	m	struct:s_mode
texture_WE	include/struct.h	/^	int		texture_WE;$/;"	m	struct:s_mode
tmp	include/libft/libft.h	/^	char		*tmp;$/;"	m	struct:s_variable
true	include/struct.h	/^	true$/;"	e	enum:e_bool
utils	include/struct.h	/^	t_utils	utils;$/;"	m	struct:s_mode
